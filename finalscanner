using AForge.Video;
using AForge.Video.DirectShow;
using MySql.Data.MySqlClient;
using System;
using System.Data;
using System.Drawing;
using System.Drawing.Printing;
using System.Windows.Forms;
using ZXing;


namespace Scanner
{
    public partial class Form1 : Form
    {
        private FilterInfoCollection cameras;
        private VideoCaptureDevice camera;
        private bool isCameraMode = false;
        private bool isScanning = false;

        // 🔹 Prevent duplicate scans
        private string lastScanned = "";
        private DateTime lastScanTime = DateTime.MinValue;

        // 🔹 Database connection
        private string connectionString = "server=localhost;database=scanner_db;uid=root;pwd=;";

        public Form1()
        {
            InitializeComponent();

            cmbMode.Items.Add("Camera");
            cmbMode.Items.Add("Scanner");
            cmbMode.SelectedIndex = 0;

            txtBarcodeInput.Visible = false;
            lblStatus.Text = "Status: Stopped";
            lblStatus.ForeColor = Color.IndianRed;

            SetupDataGridView();
        }

        // 🧱 Setup cashier table (DataGridView)
        private void SetupDataGridView()
        {
            dgvItems.Columns.Clear();
            dgvItems.Columns.Add("Barcode", "Barcode");
            dgvItems.Columns.Add("ProductName", "Product Name");
            dgvItems.Columns.Add("Price", "Price");
            dgvItems.Columns.Add("Quantity", "Quantity");
            dgvItems.Columns.Add("Total", "Total");

            dgvItems.Columns["Price"].DefaultCellStyle.Format = "₱0.00";
            dgvItems.Columns["Total"].DefaultCellStyle.Format = "₱0.00";
            dgvItems.AllowUserToAddRows = false;
            dgvItems.ReadOnly = true;
            dgvItems.RowHeadersVisible = false;
            dgvItems.AutoSizeColumnsMode = DataGridViewAutoSizeColumnsMode.Fill;
        }

        private void Form1_Load(object sender, EventArgs e)
        {

        }

        private void btnStart_Click(object sender, EventArgs e)
        {
            string mode = cmbMode.SelectedItem.ToString();
            if (mode == "Camera")
                StartCameraMode();
            else
                StartScannerMode();
        }
        private void StartCameraMode()
        {
            try
            {
                cameras = new FilterInfoCollection(FilterCategory.VideoInputDevice);

                if (cameras.Count == 0)
                {
                    MessageBox.Show("No camera found!");
                    return;
                }

                camera = new VideoCaptureDevice(cameras[0].MonikerString);
                camera.NewFrame += Camera_NewFrame;
                camera.Start();

                pictureBoxCamera.Visible = true;
                txtBarcodeInput.Visible = false;

                isCameraMode = true;
                isScanning = true;
                lblStatus.Text = "Status: Scanning (Camera)...";
                lblStatus.ForeColor = Color.SeaGreen;
            }
            catch (Exception ex)
            {
                MessageBox.Show("Error starting camera: " + ex.Message);
            }
        }

        // Scanner Mode
        private void StartScannerMode()
        {
            pictureBoxCamera.Visible = false;
            txtBarcodeInput.Visible = true;
            txtBarcodeInput.Focus();

            isCameraMode = false;
            isScanning = true;
            lblStatus.Text = "Status: Waiting for Scanner...";
            lblStatus.ForeColor = Color.SteelBlue;
        }

        private void Camera_NewFrame(object sender, NewFrameEventArgs eventArgs)
        {
            try
            {
                // Clone the camera frame
                Bitmap frame = (Bitmap)eventArgs.Frame.Clone();

                // Optional: Crop center to match PictureBox aspect ratio
                Bitmap centeredFrame = CropCenter(frame, pictureBoxCamera.Width, pictureBoxCamera.Height);

                // Display the frame in the PictureBox
                pictureBoxCamera.Invoke(new MethodInvoker(delegate
                {
                    pictureBoxCamera.Image?.Dispose();  // Dispose previous image
                    pictureBoxCamera.Image = centeredFrame;
                }));

                // Barcode scanning
                using (var temp = (Bitmap)frame.Clone())
                {
                    BarcodeReader reader = new BarcodeReader();
                    var result = reader.Decode(temp);
                    if (result != null)
                    {
                        txtResult.Invoke(new MethodInvoker(delegate
                        {
                            var row = AddProductToGrid(result.Text.Trim());
                            if (row != null)
                            {
                                dgvItems.ClearSelection();
                                row.Selected = true;
                                dgvItems.FirstDisplayedScrollingRowIndex = row.Index;
                            }
                        }));
                    }
                }

                frame.Dispose();
            }
            catch { }
        }

        // Helper method to crop the center of the frame
        private Bitmap CropCenter(Bitmap source, int targetWidth, int targetHeight)
        {
            float sourceRatio = (float)source.Width / source.Height;
            float targetRatio = (float)targetWidth / targetHeight;

            int cropWidth = source.Width;
            int cropHeight = source.Height;

            if (sourceRatio > targetRatio)
            {
                // Source is wider than target, crop width
                cropWidth = (int)(source.Height * targetRatio);
            }
            else
            {
                // Source is taller than target, crop height
                cropHeight = (int)(source.Width / targetRatio);
            }

            int x = (source.Width - cropWidth) / 2;
            int y = (source.Height - cropHeight) / 2;

            Rectangle cropRect = new Rectangle(x, y, cropWidth, cropHeight);
            Bitmap cropped = new Bitmap(cropRect.Width, cropRect.Height);

            using (Graphics g = Graphics.FromImage(cropped))
            {
                g.DrawImage(source, new Rectangle(0, 0, cropped.Width, cropped.Height), cropRect, GraphicsUnit.Pixel);
            }

            return cropped;
        }

        private void Form1_FormClosing(object sender, FormClosingEventArgs e)
        {
            StopAll();
        }

        private void btnStop_Click(object sender, EventArgs e)
        {
            StopAll();
        }
        private void StopAll()
        {
            if (camera != null && camera.IsRunning)
            {
                camera.SignalToStop();
                camera.WaitForStop();
                pictureBoxCamera.Image = null;
            }

            isScanning = false;
            lblStatus.Text = "Status: Stopped";
            lblStatus.ForeColor = Color.IndianRed;
        }

        private void txtBarcodeInput_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Enter && isScanning)
            {
                var row = AddProductToGrid(txtBarcodeInput.Text.Trim());

                if (row != null)
                {
                    dgvItems.ClearSelection();
                    row.Selected = true;
                    dgvItems.FirstDisplayedScrollingRowIndex = row.Index;
                }

                txtBarcodeInput.Clear();
                e.SuppressKeyPress = true;
            }
        }
        private DataGridViewRow AddProductToGrid(string barcode)
        {
            if (string.IsNullOrEmpty(barcode)) return null;

            // Prevent duplicate rapid scans
            if (barcode == lastScanned && (DateTime.Now - lastScanTime).TotalSeconds < 2)
                return null;

            lastScanned = barcode;
            lastScanTime = DateTime.Now;

            DataGridViewRow updatedRow = null;

            using (MySqlConnection conn = new MySqlConnection(connectionString))
            {
                conn.Open();
                string query = "SELECT * FROM products WHERE barcode=@barcode";
                MySqlCommand cmd = new MySqlCommand(query, conn);
                cmd.Parameters.AddWithValue("@barcode", barcode);

                using (var reader = cmd.ExecuteReader())
                {
                    if (reader.Read())
                    {
                        string name = reader["name"].ToString();
                        decimal price = Convert.ToDecimal(reader["price"]);

                        // Check if the product is already in the DataGridView
                        bool exists = false;
                        foreach (DataGridViewRow row in dgvItems.Rows)
                        {
                            if (row.Cells["Barcode"].Value?.ToString() == barcode)
                            {
                                int qty = Convert.ToInt32(row.Cells["Quantity"].Value) + 1;
                                row.Cells["Quantity"].Value = qty;
                                row.Cells["Total"].Value = qty * price;
                                exists = true;
                                updatedRow = row;
                                break;
                            }
                        }

                        if (!exists)
                        {
                            dgvItems.Rows.Add(barcode, name, price, 1, price);
                            updatedRow = dgvItems.Rows[dgvItems.Rows.Count - 1];
                        }

                        UpdateTotal();
                    }
                    else
                    {
                        MessageBox.Show("Product not found in database. Please add it manually first!");
                    }
                }
            }

            return updatedRow;
        }

        // Compute total
        private void UpdateTotal()
        {
            decimal sum = 0;
            foreach (DataGridViewRow row in dgvItems.Rows)
            {
                if (row.Cells["Total"].Value != null &&
                    decimal.TryParse(row.Cells["Total"].Value.ToString(), out decimal value))
                    sum += value;
            }
            lblStatus.Text = $"Status: Total ₱{sum:0.00}";
        }
        // 🧾 Product Model
        public class Product
        {
            public string Barcode { get; set; }
            public string Name { get; set; }
            public decimal Price { get; set; }
        }
        private void GenerateReceipt()
        {
            if (dgvItems.Rows.Count == 0)
            {
                rtbReceipt.Clear();
                return;
            }

            decimal totalAmount = 0;
            string receipt = "===== Cutie's Receipt =====\n";
            receipt += $"Date: {DateTime.Now}\n";
            receipt += "-----------------------------\n";
            receipt += "Item\tQty\tPrice\tTotal\n";

            foreach (DataGridViewRow row in dgvItems.Rows)
            {
                string name = row.Cells["ProductName"].Value.ToString();
                int qty = Convert.ToInt32(row.Cells["Quantity"].Value);
                decimal price = Convert.ToDecimal(row.Cells["Price"].Value);
                decimal total = Convert.ToDecimal(row.Cells["Total"].Value);

                receipt += $"{name}\t{qty}\t{price:0.00}\t{total:0.00}\n";
                totalAmount += total;
            }

            receipt += "-----------------------------\n";
            receipt += $"TOTAL: ₱{totalAmount:0.00}\n";
            receipt += "===== Thank You! =====";

            rtbReceipt.Invoke(new MethodInvoker(() =>
            {
                rtbReceipt.Text = receipt;
            }));
        }


        private void btnSaveTransaction_Click_1(object sender, EventArgs e)
        {
            if (dgvItems.Rows.Count == 0)
            {
                MessageBox.Show("No items to save.");
                return;
            }

            decimal totalAmount = 0;
            foreach (DataGridViewRow row in dgvItems.Rows)
            {
                if (decimal.TryParse(row.Cells["Total"].Value?.ToString(), out decimal value))
                    totalAmount += value;
            }

            try
            {
                using (MySqlConnection conn = new MySqlConnection(connectionString))
                {
                    conn.Open();

                    // 1️⃣ Insert transaction
                    string insertTransaction = "INSERT INTO transactions (total_amount) VALUES (@total_amount)";
                    using (MySqlCommand cmd = new MySqlCommand(insertTransaction, conn))
                    {
                        cmd.Parameters.AddWithValue("@total_amount", totalAmount);
                        cmd.ExecuteNonQuery();
                    }

                    // 2️⃣ Get last inserted transaction ID
                    long transactionId = cmdLastInsertId(conn);

                    // 3️⃣ Insert each item into transaction_items
                    foreach (DataGridViewRow row in dgvItems.Rows)
                    {
                        string insertItem = @"INSERT INTO transaction_items 
                                      (transaction_id, barcode, product_name, price, quantity, total)
                                      VALUES (@transaction_id, @barcode, @product_name, @price, @quantity, @total)";
                        using (MySqlCommand cmdItem = new MySqlCommand(insertItem, conn))
                        {
                            cmdItem.Parameters.AddWithValue("@transaction_id", transactionId);
                            cmdItem.Parameters.AddWithValue("@barcode", row.Cells["Barcode"].Value);
                            cmdItem.Parameters.AddWithValue("@product_name", row.Cells["ProductName"].Value);
                            cmdItem.Parameters.AddWithValue("@price", row.Cells["Price"].Value);
                            cmdItem.Parameters.AddWithValue("@quantity", row.Cells["Quantity"].Value);
                            cmdItem.Parameters.AddWithValue("@total", row.Cells["Total"].Value);
                            cmdItem.ExecuteNonQuery();
                        }
                    }

                    conn.Close();
                }

                // 4️⃣ Generate the receipt BEFORE clearing the grid
                GenerateReceipt();

                // 5️⃣ Clear DataGridView for next transaction
                dgvItems.Rows.Clear();
                UpdateTotal();

                MessageBox.Show("Transaction saved successfully!", "Success", MessageBoxButtons.OK, MessageBoxIcon.Information);
            }
            catch (Exception ex)
            {
                MessageBox.Show("Error saving transaction: " + ex.Message);
            }
        }
        private long cmdLastInsertId(MySqlConnection conn)
        {
            using (MySqlCommand cmd = new MySqlCommand("SELECT LAST_INSERT_ID();", conn))
                return Convert.ToInt64(cmd.ExecuteScalar());
        }

        private void btnRemove_Click(object sender, EventArgs e)
        {
            if (dgvItems.SelectedRows.Count > 0)
                dgvItems.Rows.RemoveAt(dgvItems.SelectedRows[0].Index);
            else
                MessageBox.Show("Please select a row to remove.");
        }
        private void btnClearAll_Click(object sender, EventArgs e)
        {
            dgvItems.Rows.Clear();
            UpdateTotal();
        }


        private void btnAddProduct_Click(object sender, EventArgs e)
        {
            if (string.IsNullOrWhiteSpace(txtManualBarcode.Text) ||
        string.IsNullOrWhiteSpace(txtManualName.Text) ||
        string.IsNullOrWhiteSpace(txtManualPrice.Text) ||
        string.IsNullOrWhiteSpace(txtManualQty.Text))
            {
                MessageBox.Show("Please fill in all fields.", "Missing Info", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                return;
            }

            if (!decimal.TryParse(txtManualPrice.Text, out decimal price) ||
                !int.TryParse(txtManualQty.Text, out int qty))
            {
                MessageBox.Show("Price and Quantity must be valid numbers.", "Invalid Input", MessageBoxButtons.OK, MessageBoxIcon.Error);
                return;
            }

            decimal total = price * qty;
            string barcode = txtManualBarcode.Text.Trim();
            string name = txtManualName.Text.Trim();

            using (MySqlConnection conn = new MySqlConnection(connectionString))
            {
                try
                {
                    conn.Open();

                    // Insert into DB (or update if exists)
                    string insertQuery = @"INSERT INTO products (barcode, name, price)
                                   VALUES (@barcode, @name, @price)
                                   ON DUPLICATE KEY UPDATE name=@name, price=@price";
                    using (MySqlCommand cmd = new MySqlCommand(insertQuery, conn))
                    {
                        cmd.Parameters.AddWithValue("@barcode", barcode);
                        cmd.Parameters.AddWithValue("@name", name);
                        cmd.Parameters.AddWithValue("@price", price);
                        cmd.ExecuteNonQuery();
                    }

                    conn.Close();
                }
                catch (Exception ex)
                {
                    MessageBox.Show("Error adding product to database: " + ex.Message);
                    return;
                }
            }

            // 🔹 Add to DataGridView or increment quantity if already exists
            bool exists = false;
            foreach (DataGridViewRow row in dgvItems.Rows)
            {
                if (row.Cells["Barcode"].Value?.ToString() == barcode)
                {
                    int currentQty = Convert.ToInt32(row.Cells["Quantity"].Value);
                    row.Cells["Quantity"].Value = currentQty + qty;
                    row.Cells["Total"].Value = (currentQty + qty) * price;
                    exists = true;
                    break;
                }
            }

            if (!exists)
            {
                dgvItems.Rows.Add(barcode, name, price.ToString("0.00"), qty, total.ToString("0.00"));
            }

            // Clear fields
            txtManualBarcode.Clear();
            txtManualName.Clear();
            txtManualPrice.Clear();
            txtManualQty.Clear();
            txtManualBarcode.Focus();

            UpdateTotal();
        }

        private void txtManualBarcode_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Enter)
            {
                AddProductToGrid(txtManualBarcode.Text.Trim());
                txtManualBarcode.Clear();
                e.SuppressKeyPress = true;
            }
        }

        private void btnPrintReceipt_Click(object sender, EventArgs e)
        {
            PrintDocument pd = new PrintDocument();
            pd.PrintPage += (s, ev) =>
            {
                ev.Graphics.DrawString(rtbReceipt.Text, new Font("Consolas", 10), Brushes.Black, new PointF(10, 10));
            };

            PrintDialog printDialog = new PrintDialog();
            printDialog.Document = pd;

            if (printDialog.ShowDialog() == DialogResult.OK)
                pd.Print();
        }
    }
}
